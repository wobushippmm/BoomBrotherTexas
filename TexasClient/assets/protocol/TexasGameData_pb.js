/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.ActionEnm', null, global);
goog.exportSymbol('proto.ActionRep', null, global);
goog.exportSymbol('proto.ActionReq', null, global);
goog.exportSymbol('proto.ActionResultEnm', null, global);
goog.exportSymbol('proto.CallActionRep', null, global);
goog.exportSymbol('proto.CancelMatchTableRep', null, global);
goog.exportSymbol('proto.CancelMatchTableReq', null, global);
goog.exportSymbol('proto.GetTableListRep', null, global);
goog.exportSymbol('proto.GetTableListReq', null, global);
goog.exportSymbol('proto.JoinTableRep', null, global);
goog.exportSymbol('proto.JoinTableReq', null, global);
goog.exportSymbol('proto.JoinTableResultEnm', null, global);
goog.exportSymbol('proto.LeaveTableRep', null, global);
goog.exportSymbol('proto.LeaveTableReq', null, global);
goog.exportSymbol('proto.MatchTableRep', null, global);
goog.exportSymbol('proto.MatchTableReq', null, global);
goog.exportSymbol('proto.MatchTableResultEnm', null, global);
goog.exportSymbol('proto.RoundResultRep', null, global);
goog.exportSymbol('proto.SeatCardDat', null, global);
goog.exportSymbol('proto.SeatInfoDat', null, global);
goog.exportSymbol('proto.SeatOfflineRep', null, global);
goog.exportSymbol('proto.SeatOnlineRep', null, global);
goog.exportSymbol('proto.SeatTypeEnm', null, global);
goog.exportSymbol('proto.SendCardRep', null, global);
goog.exportSymbol('proto.SitDownSeatInfoRep', null, global);
goog.exportSymbol('proto.StartRoundRep', null, global);
goog.exportSymbol('proto.TableInfoDat', null, global);
goog.exportSymbol('proto.TableInfoRep', null, global);
goog.exportSymbol('proto.TableModeEnm', null, global);
goog.exportSymbol('proto.WinnerDat', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SeatInfoDat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SeatInfoDat.repeatedFields_, null);
};
goog.inherits(proto.SeatInfoDat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SeatInfoDat.displayName = 'proto.SeatInfoDat';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SeatInfoDat.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SeatInfoDat.prototype.toObject = function(opt_includeInstance) {
  return proto.SeatInfoDat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SeatInfoDat} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SeatInfoDat.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getFieldWithDefault(msg, 1, ""),
    gold: jspb.Message.getFieldWithDefault(msg, 2, 0),
    bet: jspb.Message.getFieldWithDefault(msg, 3, 0),
    isout: jspb.Message.getFieldWithDefault(msg, 4, false),
    action: jspb.Message.getFieldWithDefault(msg, 5, 0),
    cardsList: jspb.Message.getField(msg, 6),
    nickname: jspb.Message.getFieldWithDefault(msg, 7, ""),
    portrait: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SeatInfoDat}
 */
proto.SeatInfoDat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SeatInfoDat;
  return proto.SeatInfoDat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SeatInfoDat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SeatInfoDat}
 */
proto.SeatInfoDat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGold(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBet(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsout(value);
      break;
    case 5:
      var value = /** @type {!proto.ActionEnm} */ (reader.readEnum());
      msg.setAction(value);
      break;
    case 6:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt32());
      msg.setCardsList(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setNickname(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setPortrait(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SeatInfoDat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SeatInfoDat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SeatInfoDat} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeatInfoDat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGold();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getBet();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getIsout();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getAction();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getCardsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      6,
      f
    );
  }
  f = message.getNickname();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getPortrait();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.SeatInfoDat.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.SeatInfoDat.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 gold = 2;
 * @return {number}
 */
proto.SeatInfoDat.prototype.getGold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.SeatInfoDat.prototype.setGold = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 bet = 3;
 * @return {number}
 */
proto.SeatInfoDat.prototype.getBet = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.SeatInfoDat.prototype.setBet = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bool isOut = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.SeatInfoDat.prototype.getIsout = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.SeatInfoDat.prototype.setIsout = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional ActionEnm action = 5;
 * @return {!proto.ActionEnm}
 */
proto.SeatInfoDat.prototype.getAction = function() {
  return /** @type {!proto.ActionEnm} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.ActionEnm} value */
proto.SeatInfoDat.prototype.setAction = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * repeated int32 cards = 6;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.SeatInfoDat.prototype.getCardsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 6));
};


/** @param {!Array.<number>} value */
proto.SeatInfoDat.prototype.setCardsList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.SeatInfoDat.prototype.addCards = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


proto.SeatInfoDat.prototype.clearCardsList = function() {
  this.setCardsList([]);
};


/**
 * optional string nickname = 7;
 * @return {string}
 */
proto.SeatInfoDat.prototype.getNickname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.SeatInfoDat.prototype.setNickname = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string portrait = 8;
 * @return {string}
 */
proto.SeatInfoDat.prototype.getPortrait = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.SeatInfoDat.prototype.setPortrait = function(value) {
  jspb.Message.setField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TableInfoRep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TableInfoRep.repeatedFields_, null);
};
goog.inherits(proto.TableInfoRep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TableInfoRep.displayName = 'proto.TableInfoRep';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TableInfoRep.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TableInfoRep.prototype.toObject = function(opt_includeInstance) {
  return proto.TableInfoRep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TableInfoRep} msg The msg instance to transform.
 * @return {!Object}
 */
proto.TableInfoRep.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    seatsList: jspb.Message.toObjectList(msg.getSeatsList(),
    proto.SeatInfoDat.toObject, includeInstance),
    pubcardsList: jspb.Message.getField(msg, 3),
    currbet: jspb.Message.getFieldWithDefault(msg, 4, 0),
    mode: jspb.Message.getFieldWithDefault(msg, 5, 0),
    turn: jspb.Message.getFieldWithDefault(msg, 6, 0),
    time: jspb.Message.getFieldWithDefault(msg, 7, 0),
    isrejoin: jspb.Message.getFieldWithDefault(msg, 8, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TableInfoRep}
 */
proto.TableInfoRep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TableInfoRep;
  return proto.TableInfoRep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TableInfoRep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TableInfoRep}
 */
proto.TableInfoRep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.SeatInfoDat;
      reader.readMessage(value,proto.SeatInfoDat.deserializeBinaryFromReader);
      msg.addSeats(value);
      break;
    case 3:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt32());
      msg.setPubcardsList(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCurrbet(value);
      break;
    case 5:
      var value = /** @type {!proto.TableModeEnm} */ (reader.readEnum());
      msg.setMode(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTurn(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTime(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsrejoin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TableInfoRep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TableInfoRep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TableInfoRep} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.TableInfoRep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSeatsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.SeatInfoDat.serializeBinaryToWriter
    );
  }
  f = message.getPubcardsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      3,
      f
    );
  }
  f = message.getCurrbet();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getMode();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getTurn();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getIsrejoin();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.TableInfoRep.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.TableInfoRep.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated SeatInfoDat seats = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.SeatInfoDat>}
 */
proto.TableInfoRep.prototype.getSeatsList = function() {
  return /** @type{!Array.<!proto.SeatInfoDat>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SeatInfoDat, 2));
};


/** @param {!Array.<!proto.SeatInfoDat>} value */
proto.TableInfoRep.prototype.setSeatsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.SeatInfoDat=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SeatInfoDat}
 */
proto.TableInfoRep.prototype.addSeats = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.SeatInfoDat, opt_index);
};


proto.TableInfoRep.prototype.clearSeatsList = function() {
  this.setSeatsList([]);
};


/**
 * repeated int32 pubCards = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.TableInfoRep.prototype.getPubcardsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 3));
};


/** @param {!Array.<number>} value */
proto.TableInfoRep.prototype.setPubcardsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.TableInfoRep.prototype.addPubcards = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.TableInfoRep.prototype.clearPubcardsList = function() {
  this.setPubcardsList([]);
};


/**
 * optional int32 currBet = 4;
 * @return {number}
 */
proto.TableInfoRep.prototype.getCurrbet = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.TableInfoRep.prototype.setCurrbet = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional TableModeEnm mode = 5;
 * @return {!proto.TableModeEnm}
 */
proto.TableInfoRep.prototype.getMode = function() {
  return /** @type {!proto.TableModeEnm} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.TableModeEnm} value */
proto.TableInfoRep.prototype.setMode = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int32 turn = 6;
 * @return {number}
 */
proto.TableInfoRep.prototype.getTurn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.TableInfoRep.prototype.setTurn = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional int64 time = 7;
 * @return {number}
 */
proto.TableInfoRep.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.TableInfoRep.prototype.setTime = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional bool isRejoin = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.TableInfoRep.prototype.getIsrejoin = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.TableInfoRep.prototype.setIsrejoin = function(value) {
  jspb.Message.setField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.StartRoundRep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.StartRoundRep.repeatedFields_, null);
};
goog.inherits(proto.StartRoundRep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.StartRoundRep.displayName = 'proto.StartRoundRep';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.StartRoundRep.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.StartRoundRep.prototype.toObject = function(opt_includeInstance) {
  return proto.StartRoundRep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.StartRoundRep} msg The msg instance to transform.
 * @return {!Object}
 */
proto.StartRoundRep.toObject = function(includeInstance, msg) {
  var f, obj = {
    pubcardsList: jspb.Message.getField(msg, 1),
    seatcardsList: jspb.Message.getField(msg, 2),
    butten: jspb.Message.getFieldWithDefault(msg, 3, 0),
    blinds: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.StartRoundRep}
 */
proto.StartRoundRep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.StartRoundRep;
  return proto.StartRoundRep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.StartRoundRep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.StartRoundRep}
 */
proto.StartRoundRep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt32());
      msg.setPubcardsList(value);
      break;
    case 2:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt32());
      msg.setSeatcardsList(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setButten(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBlinds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.StartRoundRep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.StartRoundRep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.StartRoundRep} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.StartRoundRep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPubcardsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      1,
      f
    );
  }
  f = message.getSeatcardsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      2,
      f
    );
  }
  f = message.getButten();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getBlinds();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * repeated int32 pubCards = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.StartRoundRep.prototype.getPubcardsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 1));
};


/** @param {!Array.<number>} value */
proto.StartRoundRep.prototype.setPubcardsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.StartRoundRep.prototype.addPubcards = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.StartRoundRep.prototype.clearPubcardsList = function() {
  this.setPubcardsList([]);
};


/**
 * repeated int32 seatCards = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.StartRoundRep.prototype.getSeatcardsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 2));
};


/** @param {!Array.<number>} value */
proto.StartRoundRep.prototype.setSeatcardsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.StartRoundRep.prototype.addSeatcards = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.StartRoundRep.prototype.clearSeatcardsList = function() {
  this.setSeatcardsList([]);
};


/**
 * optional int32 butten = 3;
 * @return {number}
 */
proto.StartRoundRep.prototype.getButten = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.StartRoundRep.prototype.setButten = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 blinds = 4;
 * @return {number}
 */
proto.StartRoundRep.prototype.getBlinds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.StartRoundRep.prototype.setBlinds = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CallActionRep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CallActionRep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CallActionRep.displayName = 'proto.CallActionRep';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CallActionRep.prototype.toObject = function(opt_includeInstance) {
  return proto.CallActionRep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CallActionRep} msg The msg instance to transform.
 * @return {!Object}
 */
proto.CallActionRep.toObject = function(includeInstance, msg) {
  var f, obj = {
    seat: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CallActionRep}
 */
proto.CallActionRep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CallActionRep;
  return proto.CallActionRep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CallActionRep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CallActionRep}
 */
proto.CallActionRep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSeat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CallActionRep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CallActionRep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CallActionRep} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.CallActionRep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeat();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 seat = 1;
 * @return {number}
 */
proto.CallActionRep.prototype.getSeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.CallActionRep.prototype.setSeat = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ActionReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ActionReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ActionReq.displayName = 'proto.ActionReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ActionReq.prototype.toObject = function(opt_includeInstance) {
  return proto.ActionReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ActionReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ActionReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    action: jspb.Message.getFieldWithDefault(msg, 1, 0),
    bet: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ActionReq}
 */
proto.ActionReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ActionReq;
  return proto.ActionReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ActionReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ActionReq}
 */
proto.ActionReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ActionEnm} */ (reader.readEnum());
      msg.setAction(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ActionReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ActionReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ActionReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.ActionReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAction();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getBet();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional ActionEnm action = 1;
 * @return {!proto.ActionEnm}
 */
proto.ActionReq.prototype.getAction = function() {
  return /** @type {!proto.ActionEnm} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.ActionEnm} value */
proto.ActionReq.prototype.setAction = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 bet = 2;
 * @return {number}
 */
proto.ActionReq.prototype.getBet = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ActionReq.prototype.setBet = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ActionRep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ActionRep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ActionRep.displayName = 'proto.ActionRep';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ActionRep.prototype.toObject = function(opt_includeInstance) {
  return proto.ActionRep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ActionRep} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ActionRep.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, 0),
    seat: jspb.Message.getFieldWithDefault(msg, 2, 0),
    action: jspb.Message.getFieldWithDefault(msg, 3, 0),
    gold: jspb.Message.getFieldWithDefault(msg, 4, 0),
    bet: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ActionRep}
 */
proto.ActionRep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ActionRep;
  return proto.ActionRep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ActionRep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ActionRep}
 */
proto.ActionRep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ActionResultEnm} */ (reader.readEnum());
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSeat(value);
      break;
    case 3:
      var value = /** @type {!proto.ActionEnm} */ (reader.readEnum());
      msg.setAction(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGold(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ActionRep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ActionRep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ActionRep} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.ActionRep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSeat();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getAction();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getGold();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getBet();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional ActionResultEnm result = 1;
 * @return {!proto.ActionResultEnm}
 */
proto.ActionRep.prototype.getResult = function() {
  return /** @type {!proto.ActionResultEnm} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.ActionResultEnm} value */
proto.ActionRep.prototype.setResult = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 seat = 2;
 * @return {number}
 */
proto.ActionRep.prototype.getSeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ActionRep.prototype.setSeat = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional ActionEnm action = 3;
 * @return {!proto.ActionEnm}
 */
proto.ActionRep.prototype.getAction = function() {
  return /** @type {!proto.ActionEnm} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.ActionEnm} value */
proto.ActionRep.prototype.setAction = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 gold = 4;
 * @return {number}
 */
proto.ActionRep.prototype.getGold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.ActionRep.prototype.setGold = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 bet = 5;
 * @return {number}
 */
proto.ActionRep.prototype.getBet = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.ActionRep.prototype.setBet = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SendCardRep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SendCardRep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SendCardRep.displayName = 'proto.SendCardRep';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SendCardRep.prototype.toObject = function(opt_includeInstance) {
  return proto.SendCardRep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SendCardRep} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SendCardRep.toObject = function(includeInstance, msg) {
  var f, obj = {
    card: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SendCardRep}
 */
proto.SendCardRep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SendCardRep;
  return proto.SendCardRep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SendCardRep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SendCardRep}
 */
proto.SendCardRep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCard(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SendCardRep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SendCardRep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SendCardRep} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SendCardRep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCard();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 card = 1;
 * @return {number}
 */
proto.SendCardRep.prototype.getCard = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SendCardRep.prototype.setCard = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LeaveTableReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LeaveTableReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LeaveTableReq.displayName = 'proto.LeaveTableReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LeaveTableReq.prototype.toObject = function(opt_includeInstance) {
  return proto.LeaveTableReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LeaveTableReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.LeaveTableReq.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LeaveTableReq}
 */
proto.LeaveTableReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LeaveTableReq;
  return proto.LeaveTableReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LeaveTableReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LeaveTableReq}
 */
proto.LeaveTableReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LeaveTableReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LeaveTableReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LeaveTableReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.LeaveTableReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LeaveTableRep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LeaveTableRep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LeaveTableRep.displayName = 'proto.LeaveTableRep';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LeaveTableRep.prototype.toObject = function(opt_includeInstance) {
  return proto.LeaveTableRep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LeaveTableRep} msg The msg instance to transform.
 * @return {!Object}
 */
proto.LeaveTableRep.toObject = function(includeInstance, msg) {
  var f, obj = {
    seat: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LeaveTableRep}
 */
proto.LeaveTableRep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LeaveTableRep;
  return proto.LeaveTableRep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LeaveTableRep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LeaveTableRep}
 */
proto.LeaveTableRep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSeat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LeaveTableRep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LeaveTableRep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LeaveTableRep} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.LeaveTableRep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeat();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 seat = 1;
 * @return {number}
 */
proto.LeaveTableRep.prototype.getSeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.LeaveTableRep.prototype.setSeat = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WinnerDat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.WinnerDat.repeatedFields_, null);
};
goog.inherits(proto.WinnerDat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WinnerDat.displayName = 'proto.WinnerDat';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.WinnerDat.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WinnerDat.prototype.toObject = function(opt_includeInstance) {
  return proto.WinnerDat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WinnerDat} msg The msg instance to transform.
 * @return {!Object}
 */
proto.WinnerDat.toObject = function(includeInstance, msg) {
  var f, obj = {
    seat: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cardsList: jspb.Message.getField(msg, 2),
    gold: jspb.Message.getFieldWithDefault(msg, 3, 0),
    bet: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WinnerDat}
 */
proto.WinnerDat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WinnerDat;
  return proto.WinnerDat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WinnerDat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WinnerDat}
 */
proto.WinnerDat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSeat(value);
      break;
    case 2:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt32());
      msg.setCardsList(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGold(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WinnerDat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WinnerDat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WinnerDat} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.WinnerDat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeat();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCardsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      2,
      f
    );
  }
  f = message.getGold();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getBet();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional int32 seat = 1;
 * @return {number}
 */
proto.WinnerDat.prototype.getSeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.WinnerDat.prototype.setSeat = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated int32 cards = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.WinnerDat.prototype.getCardsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 2));
};


/** @param {!Array.<number>} value */
proto.WinnerDat.prototype.setCardsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.WinnerDat.prototype.addCards = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.WinnerDat.prototype.clearCardsList = function() {
  this.setCardsList([]);
};


/**
 * optional int32 gold = 3;
 * @return {number}
 */
proto.WinnerDat.prototype.getGold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.WinnerDat.prototype.setGold = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 bet = 4;
 * @return {number}
 */
proto.WinnerDat.prototype.getBet = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.WinnerDat.prototype.setBet = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SeatCardDat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SeatCardDat.repeatedFields_, null);
};
goog.inherits(proto.SeatCardDat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SeatCardDat.displayName = 'proto.SeatCardDat';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SeatCardDat.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SeatCardDat.prototype.toObject = function(opt_includeInstance) {
  return proto.SeatCardDat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SeatCardDat} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SeatCardDat.toObject = function(includeInstance, msg) {
  var f, obj = {
    seat: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cardsList: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SeatCardDat}
 */
proto.SeatCardDat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SeatCardDat;
  return proto.SeatCardDat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SeatCardDat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SeatCardDat}
 */
proto.SeatCardDat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSeat(value);
      break;
    case 2:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt32());
      msg.setCardsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SeatCardDat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SeatCardDat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SeatCardDat} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeatCardDat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeat();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCardsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 seat = 1;
 * @return {number}
 */
proto.SeatCardDat.prototype.getSeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SeatCardDat.prototype.setSeat = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated int32 cards = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.SeatCardDat.prototype.getCardsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 2));
};


/** @param {!Array.<number>} value */
proto.SeatCardDat.prototype.setCardsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.SeatCardDat.prototype.addCards = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.SeatCardDat.prototype.clearCardsList = function() {
  this.setCardsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RoundResultRep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.RoundResultRep.repeatedFields_, null);
};
goog.inherits(proto.RoundResultRep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RoundResultRep.displayName = 'proto.RoundResultRep';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.RoundResultRep.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RoundResultRep.prototype.toObject = function(opt_includeInstance) {
  return proto.RoundResultRep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RoundResultRep} msg The msg instance to transform.
 * @return {!Object}
 */
proto.RoundResultRep.toObject = function(includeInstance, msg) {
  var f, obj = {
    winnersList: jspb.Message.toObjectList(msg.getWinnersList(),
    proto.WinnerDat.toObject, includeInstance),
    seatsList: jspb.Message.toObjectList(msg.getSeatsList(),
    proto.SeatCardDat.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RoundResultRep}
 */
proto.RoundResultRep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RoundResultRep;
  return proto.RoundResultRep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RoundResultRep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RoundResultRep}
 */
proto.RoundResultRep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.WinnerDat;
      reader.readMessage(value,proto.WinnerDat.deserializeBinaryFromReader);
      msg.addWinners(value);
      break;
    case 2:
      var value = new proto.SeatCardDat;
      reader.readMessage(value,proto.SeatCardDat.deserializeBinaryFromReader);
      msg.addSeats(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RoundResultRep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RoundResultRep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RoundResultRep} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.RoundResultRep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWinnersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.WinnerDat.serializeBinaryToWriter
    );
  }
  f = message.getSeatsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.SeatCardDat.serializeBinaryToWriter
    );
  }
};


/**
 * repeated WinnerDat winners = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.WinnerDat>}
 */
proto.RoundResultRep.prototype.getWinnersList = function() {
  return /** @type{!Array.<!proto.WinnerDat>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.WinnerDat, 1));
};


/** @param {!Array.<!proto.WinnerDat>} value */
proto.RoundResultRep.prototype.setWinnersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.WinnerDat=} opt_value
 * @param {number=} opt_index
 * @return {!proto.WinnerDat}
 */
proto.RoundResultRep.prototype.addWinners = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.WinnerDat, opt_index);
};


proto.RoundResultRep.prototype.clearWinnersList = function() {
  this.setWinnersList([]);
};


/**
 * repeated SeatCardDat seats = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.SeatCardDat>}
 */
proto.RoundResultRep.prototype.getSeatsList = function() {
  return /** @type{!Array.<!proto.SeatCardDat>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SeatCardDat, 2));
};


/** @param {!Array.<!proto.SeatCardDat>} value */
proto.RoundResultRep.prototype.setSeatsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.SeatCardDat=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SeatCardDat}
 */
proto.RoundResultRep.prototype.addSeats = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.SeatCardDat, opt_index);
};


proto.RoundResultRep.prototype.clearSeatsList = function() {
  this.setSeatsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MatchTableReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MatchTableReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MatchTableReq.displayName = 'proto.MatchTableReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MatchTableReq.prototype.toObject = function(opt_includeInstance) {
  return proto.MatchTableReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MatchTableReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.MatchTableReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    mode: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MatchTableReq}
 */
proto.MatchTableReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MatchTableReq;
  return proto.MatchTableReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MatchTableReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MatchTableReq}
 */
proto.MatchTableReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.TableModeEnm} */ (reader.readEnum());
      msg.setMode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MatchTableReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MatchTableReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MatchTableReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.MatchTableReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional TableModeEnm mode = 1;
 * @return {!proto.TableModeEnm}
 */
proto.MatchTableReq.prototype.getMode = function() {
  return /** @type {!proto.TableModeEnm} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.TableModeEnm} value */
proto.MatchTableReq.prototype.setMode = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MatchTableRep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MatchTableRep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MatchTableRep.displayName = 'proto.MatchTableRep';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MatchTableRep.prototype.toObject = function(opt_includeInstance) {
  return proto.MatchTableRep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MatchTableRep} msg The msg instance to transform.
 * @return {!Object}
 */
proto.MatchTableRep.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MatchTableRep}
 */
proto.MatchTableRep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MatchTableRep;
  return proto.MatchTableRep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MatchTableRep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MatchTableRep}
 */
proto.MatchTableRep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.MatchTableResultEnm} */ (reader.readEnum());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MatchTableRep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MatchTableRep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MatchTableRep} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.MatchTableRep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional MatchTableResultEnm result = 1;
 * @return {!proto.MatchTableResultEnm}
 */
proto.MatchTableRep.prototype.getResult = function() {
  return /** @type {!proto.MatchTableResultEnm} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.MatchTableResultEnm} value */
proto.MatchTableRep.prototype.setResult = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CancelMatchTableReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CancelMatchTableReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CancelMatchTableReq.displayName = 'proto.CancelMatchTableReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CancelMatchTableReq.prototype.toObject = function(opt_includeInstance) {
  return proto.CancelMatchTableReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CancelMatchTableReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.CancelMatchTableReq.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CancelMatchTableReq}
 */
proto.CancelMatchTableReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CancelMatchTableReq;
  return proto.CancelMatchTableReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CancelMatchTableReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CancelMatchTableReq}
 */
proto.CancelMatchTableReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CancelMatchTableReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CancelMatchTableReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CancelMatchTableReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.CancelMatchTableReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CancelMatchTableRep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CancelMatchTableRep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CancelMatchTableRep.displayName = 'proto.CancelMatchTableRep';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CancelMatchTableRep.prototype.toObject = function(opt_includeInstance) {
  return proto.CancelMatchTableRep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CancelMatchTableRep} msg The msg instance to transform.
 * @return {!Object}
 */
proto.CancelMatchTableRep.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CancelMatchTableRep}
 */
proto.CancelMatchTableRep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CancelMatchTableRep;
  return proto.CancelMatchTableRep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CancelMatchTableRep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CancelMatchTableRep}
 */
proto.CancelMatchTableRep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CancelMatchTableRep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CancelMatchTableRep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CancelMatchTableRep} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.CancelMatchTableRep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.JoinTableReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.JoinTableReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.JoinTableReq.displayName = 'proto.JoinTableReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.JoinTableReq.prototype.toObject = function(opt_includeInstance) {
  return proto.JoinTableReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.JoinTableReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.JoinTableReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.JoinTableReq}
 */
proto.JoinTableReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.JoinTableReq;
  return proto.JoinTableReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.JoinTableReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.JoinTableReq}
 */
proto.JoinTableReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.JoinTableReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.JoinTableReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.JoinTableReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.JoinTableReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.JoinTableReq.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.JoinTableReq.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.JoinTableRep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.JoinTableRep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.JoinTableRep.displayName = 'proto.JoinTableRep';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.JoinTableRep.prototype.toObject = function(opt_includeInstance) {
  return proto.JoinTableRep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.JoinTableRep} msg The msg instance to transform.
 * @return {!Object}
 */
proto.JoinTableRep.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.JoinTableRep}
 */
proto.JoinTableRep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.JoinTableRep;
  return proto.JoinTableRep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.JoinTableRep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.JoinTableRep}
 */
proto.JoinTableRep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.JoinTableResultEnm} */ (reader.readEnum());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.JoinTableRep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.JoinTableRep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.JoinTableRep} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.JoinTableRep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional JoinTableResultEnm result = 1;
 * @return {!proto.JoinTableResultEnm}
 */
proto.JoinTableRep.prototype.getResult = function() {
  return /** @type {!proto.JoinTableResultEnm} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.JoinTableResultEnm} value */
proto.JoinTableRep.prototype.setResult = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SitDownSeatInfoRep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SitDownSeatInfoRep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SitDownSeatInfoRep.displayName = 'proto.SitDownSeatInfoRep';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SitDownSeatInfoRep.prototype.toObject = function(opt_includeInstance) {
  return proto.SitDownSeatInfoRep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SitDownSeatInfoRep} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SitDownSeatInfoRep.toObject = function(includeInstance, msg) {
  var f, obj = {
    seatindex: jspb.Message.getFieldWithDefault(msg, 1, 0),
    seatinfo: (f = msg.getSeatinfo()) && proto.SeatInfoDat.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SitDownSeatInfoRep}
 */
proto.SitDownSeatInfoRep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SitDownSeatInfoRep;
  return proto.SitDownSeatInfoRep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SitDownSeatInfoRep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SitDownSeatInfoRep}
 */
proto.SitDownSeatInfoRep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSeatindex(value);
      break;
    case 2:
      var value = new proto.SeatInfoDat;
      reader.readMessage(value,proto.SeatInfoDat.deserializeBinaryFromReader);
      msg.setSeatinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SitDownSeatInfoRep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SitDownSeatInfoRep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SitDownSeatInfoRep} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SitDownSeatInfoRep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeatindex();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSeatinfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.SeatInfoDat.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 seatIndex = 1;
 * @return {number}
 */
proto.SitDownSeatInfoRep.prototype.getSeatindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SitDownSeatInfoRep.prototype.setSeatindex = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional SeatInfoDat seatInfo = 2;
 * @return {?proto.SeatInfoDat}
 */
proto.SitDownSeatInfoRep.prototype.getSeatinfo = function() {
  return /** @type{?proto.SeatInfoDat} */ (
    jspb.Message.getWrapperField(this, proto.SeatInfoDat, 2));
};


/** @param {?proto.SeatInfoDat|undefined} value */
proto.SitDownSeatInfoRep.prototype.setSeatinfo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.SitDownSeatInfoRep.prototype.clearSeatinfo = function() {
  this.setSeatinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SitDownSeatInfoRep.prototype.hasSeatinfo = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetTableListReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetTableListReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetTableListReq.displayName = 'proto.GetTableListReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetTableListReq.prototype.toObject = function(opt_includeInstance) {
  return proto.GetTableListReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetTableListReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.GetTableListReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    startindex: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetTableListReq}
 */
proto.GetTableListReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetTableListReq;
  return proto.GetTableListReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetTableListReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetTableListReq}
 */
proto.GetTableListReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStartindex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetTableListReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetTableListReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetTableListReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.GetTableListReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartindex();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 startIndex = 1;
 * @return {number}
 */
proto.GetTableListReq.prototype.getStartindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.GetTableListReq.prototype.setStartindex = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TableInfoDat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TableInfoDat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TableInfoDat.displayName = 'proto.TableInfoDat';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TableInfoDat.prototype.toObject = function(opt_includeInstance) {
  return proto.TableInfoDat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TableInfoDat} msg The msg instance to transform.
 * @return {!Object}
 */
proto.TableInfoDat.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    emptyseat: jspb.Message.getFieldWithDefault(msg, 2, 0),
    mode: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TableInfoDat}
 */
proto.TableInfoDat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TableInfoDat;
  return proto.TableInfoDat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TableInfoDat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TableInfoDat}
 */
proto.TableInfoDat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEmptyseat(value);
      break;
    case 3:
      var value = /** @type {!proto.TableModeEnm} */ (reader.readEnum());
      msg.setMode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TableInfoDat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TableInfoDat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TableInfoDat} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.TableInfoDat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getEmptyseat();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getMode();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.TableInfoDat.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.TableInfoDat.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 emptySeat = 2;
 * @return {number}
 */
proto.TableInfoDat.prototype.getEmptyseat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.TableInfoDat.prototype.setEmptyseat = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional TableModeEnm mode = 3;
 * @return {!proto.TableModeEnm}
 */
proto.TableInfoDat.prototype.getMode = function() {
  return /** @type {!proto.TableModeEnm} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.TableModeEnm} value */
proto.TableInfoDat.prototype.setMode = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetTableListRep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GetTableListRep.repeatedFields_, null);
};
goog.inherits(proto.GetTableListRep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetTableListRep.displayName = 'proto.GetTableListRep';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GetTableListRep.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetTableListRep.prototype.toObject = function(opt_includeInstance) {
  return proto.GetTableListRep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetTableListRep} msg The msg instance to transform.
 * @return {!Object}
 */
proto.GetTableListRep.toObject = function(includeInstance, msg) {
  var f, obj = {
    tablelistList: jspb.Message.toObjectList(msg.getTablelistList(),
    proto.TableInfoDat.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetTableListRep}
 */
proto.GetTableListRep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetTableListRep;
  return proto.GetTableListRep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetTableListRep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetTableListRep}
 */
proto.GetTableListRep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.TableInfoDat;
      reader.readMessage(value,proto.TableInfoDat.deserializeBinaryFromReader);
      msg.addTablelist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetTableListRep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetTableListRep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetTableListRep} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.GetTableListRep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTablelistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.TableInfoDat.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TableInfoDat tableList = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.TableInfoDat>}
 */
proto.GetTableListRep.prototype.getTablelistList = function() {
  return /** @type{!Array.<!proto.TableInfoDat>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TableInfoDat, 1));
};


/** @param {!Array.<!proto.TableInfoDat>} value */
proto.GetTableListRep.prototype.setTablelistList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.TableInfoDat=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TableInfoDat}
 */
proto.GetTableListRep.prototype.addTablelist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.TableInfoDat, opt_index);
};


proto.GetTableListRep.prototype.clearTablelistList = function() {
  this.setTablelistList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SeatOfflineRep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SeatOfflineRep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SeatOfflineRep.displayName = 'proto.SeatOfflineRep';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SeatOfflineRep.prototype.toObject = function(opt_includeInstance) {
  return proto.SeatOfflineRep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SeatOfflineRep} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SeatOfflineRep.toObject = function(includeInstance, msg) {
  var f, obj = {
    seat: jspb.Message.getFieldWithDefault(msg, 1, 0),
    isoffline: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SeatOfflineRep}
 */
proto.SeatOfflineRep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SeatOfflineRep;
  return proto.SeatOfflineRep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SeatOfflineRep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SeatOfflineRep}
 */
proto.SeatOfflineRep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSeat(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsoffline(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SeatOfflineRep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SeatOfflineRep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SeatOfflineRep} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeatOfflineRep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeat();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getIsoffline();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional int32 seat = 1;
 * @return {number}
 */
proto.SeatOfflineRep.prototype.getSeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SeatOfflineRep.prototype.setSeat = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool isOffline = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.SeatOfflineRep.prototype.getIsoffline = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.SeatOfflineRep.prototype.setIsoffline = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SeatOnlineRep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SeatOnlineRep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SeatOnlineRep.displayName = 'proto.SeatOnlineRep';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SeatOnlineRep.prototype.toObject = function(opt_includeInstance) {
  return proto.SeatOnlineRep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SeatOnlineRep} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SeatOnlineRep.toObject = function(includeInstance, msg) {
  var f, obj = {
    seat: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SeatOnlineRep}
 */
proto.SeatOnlineRep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SeatOnlineRep;
  return proto.SeatOnlineRep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SeatOnlineRep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SeatOnlineRep}
 */
proto.SeatOnlineRep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSeat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SeatOnlineRep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SeatOnlineRep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SeatOnlineRep} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SeatOnlineRep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeat();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 seat = 1;
 * @return {number}
 */
proto.SeatOnlineRep.prototype.getSeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SeatOnlineRep.prototype.setSeat = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.ActionEnm = {
  UNDEFINE_ACTION: 0,
  WAIT: 1,
  CHECK: 2,
  CALL: 3,
  RAISE: 4,
  ALLIN: 5,
  FOLD: 6
};

/**
 * @enum {number}
 */
proto.ActionResultEnm = {
  UNDEFINE_ACTIONRESULT: 0,
  OK_ACTIONRESULT: 1,
  GOLD_NOT_ENOUGH: 2,
  ACTION_INVALIDITY: 3,
  NOT_YOUR_TURN: 4
};

/**
 * @enum {number}
 */
proto.SeatTypeEnm = {
  UNDEFINE_SEATTYPE: 0,
  NOBODY: 1,
  PLAYER: 2,
  AI: 3
};

/**
 * @enum {number}
 */
proto.TableModeEnm = {
  UNDEFINE_TABLEMODE: 0,
  MODE_NORMAL_5: 1,
  MODE_NORMAL_7: 2,
  MODE_RICH_5: 3,
  MODE_RICH_7: 4,
  MODE_SUPER_RICH_5: 5,
  MODE_SUPER_RICH_7: 6
};

/**
 * @enum {number}
 */
proto.MatchTableResultEnm = {
  UNDEFINE_MATCHTABLERESULT: 0,
  OK_MATCHTABLERESULT: 1,
  ALREADY_IN_QUEUE: 2,
  GOLD_NOT_ENOUGH_MATCHTABLERESULT: 3
};

/**
 * @enum {number}
 */
proto.JoinTableResultEnm = {
  UNDEFINE_JOINTABLERESULT: 0,
  OK_JOINTABLERESULT: 1,
  NO_EMPTY_SEAT: 2,
  TABLE_DISTROYED: 3,
  GOLD_NOT_ENOUGH_JOINTABLERESULT: 4
};

goog.object.extend(exports, proto);
