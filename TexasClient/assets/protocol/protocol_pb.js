/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.AddressDat', null, global);
goog.exportSymbol('proto.DisconnectCauseEnm', null, global);
goog.exportSymbol('proto.DisconnectRep', null, global);
goog.exportSymbol('proto.HeartRpc', null, global);
goog.exportSymbol('proto.HelloRpc', null, global);
goog.exportSymbol('proto.QuitRpc', null, global);
goog.exportSymbol('proto.RpcPo', null, global);
goog.exportSymbol('proto.ServerListRpc', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.HelloRpc = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.HelloRpc, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.HelloRpc.displayName = 'proto.HelloRpc';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.HelloRpc.prototype.toObject = function(opt_includeInstance) {
  return proto.HelloRpc.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.HelloRpc} msg The msg instance to transform.
 * @return {!Object}
 */
proto.HelloRpc.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    port: jspb.Message.getFieldWithDefault(msg, 2, 0),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    websocketport: jspb.Message.getFieldWithDefault(msg, 4, 0),
    udpport: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.HelloRpc}
 */
proto.HelloRpc.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.HelloRpc;
  return proto.HelloRpc.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.HelloRpc} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.HelloRpc}
 */
proto.HelloRpc.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWebsocketport(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUdpport(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.HelloRpc.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.HelloRpc.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.HelloRpc} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.HelloRpc.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getWebsocketport();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getUdpport();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.HelloRpc.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.HelloRpc.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 port = 2;
 * @return {number}
 */
proto.HelloRpc.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.HelloRpc.prototype.setPort = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.HelloRpc.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.HelloRpc.prototype.setName = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 websocketPort = 4;
 * @return {number}
 */
proto.HelloRpc.prototype.getWebsocketport = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.HelloRpc.prototype.setWebsocketport = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 udpPort = 5;
 * @return {number}
 */
proto.HelloRpc.prototype.getUdpport = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.HelloRpc.prototype.setUdpport = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.QuitRpc = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.QuitRpc, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.QuitRpc.displayName = 'proto.QuitRpc';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.QuitRpc.prototype.toObject = function(opt_includeInstance) {
  return proto.QuitRpc.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.QuitRpc} msg The msg instance to transform.
 * @return {!Object}
 */
proto.QuitRpc.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.QuitRpc}
 */
proto.QuitRpc.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.QuitRpc;
  return proto.QuitRpc.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.QuitRpc} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.QuitRpc}
 */
proto.QuitRpc.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.QuitRpc.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.QuitRpc.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.QuitRpc} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.QuitRpc.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.HeartRpc = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.HeartRpc, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.HeartRpc.displayName = 'proto.HeartRpc';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.HeartRpc.prototype.toObject = function(opt_includeInstance) {
  return proto.HeartRpc.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.HeartRpc} msg The msg instance to transform.
 * @return {!Object}
 */
proto.HeartRpc.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.HeartRpc}
 */
proto.HeartRpc.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.HeartRpc;
  return proto.HeartRpc.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.HeartRpc} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.HeartRpc}
 */
proto.HeartRpc.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.HeartRpc.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.HeartRpc.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.HeartRpc} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.HeartRpc.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AddressDat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AddressDat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AddressDat.displayName = 'proto.AddressDat';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AddressDat.prototype.toObject = function(opt_includeInstance) {
  return proto.AddressDat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AddressDat} msg The msg instance to transform.
 * @return {!Object}
 */
proto.AddressDat.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    port: jspb.Message.getFieldWithDefault(msg, 2, 0),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    type: jspb.Message.getFieldWithDefault(msg, 4, ""),
    websocketport: jspb.Message.getFieldWithDefault(msg, 5, 0),
    udpport: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AddressDat}
 */
proto.AddressDat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AddressDat;
  return proto.AddressDat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AddressDat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AddressDat}
 */
proto.AddressDat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWebsocketport(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUdpport(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AddressDat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AddressDat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AddressDat} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.AddressDat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getWebsocketport();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getUdpport();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.AddressDat.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.AddressDat.prototype.setAddress = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 port = 2;
 * @return {number}
 */
proto.AddressDat.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.AddressDat.prototype.setPort = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.AddressDat.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.AddressDat.prototype.setName = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string type = 4;
 * @return {string}
 */
proto.AddressDat.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.AddressDat.prototype.setType = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 websocketPort = 5;
 * @return {number}
 */
proto.AddressDat.prototype.getWebsocketport = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.AddressDat.prototype.setWebsocketport = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int32 udpPort = 6;
 * @return {number}
 */
proto.AddressDat.prototype.getUdpport = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.AddressDat.prototype.setUdpport = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ServerListRpc = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ServerListRpc.repeatedFields_, null);
};
goog.inherits(proto.ServerListRpc, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ServerListRpc.displayName = 'proto.ServerListRpc';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ServerListRpc.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ServerListRpc.prototype.toObject = function(opt_includeInstance) {
  return proto.ServerListRpc.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ServerListRpc} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ServerListRpc.toObject = function(includeInstance, msg) {
  var f, obj = {
    serverlistList: jspb.Message.toObjectList(msg.getServerlistList(),
    proto.AddressDat.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ServerListRpc}
 */
proto.ServerListRpc.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ServerListRpc;
  return proto.ServerListRpc.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ServerListRpc} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ServerListRpc}
 */
proto.ServerListRpc.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.AddressDat;
      reader.readMessage(value,proto.AddressDat.deserializeBinaryFromReader);
      msg.addServerlist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ServerListRpc.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ServerListRpc.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ServerListRpc} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.ServerListRpc.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServerlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.AddressDat.serializeBinaryToWriter
    );
  }
};


/**
 * repeated AddressDat serverList = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.AddressDat>}
 */
proto.ServerListRpc.prototype.getServerlistList = function() {
  return /** @type{!Array.<!proto.AddressDat>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.AddressDat, 1));
};


/** @param {!Array.<!proto.AddressDat>} value */
proto.ServerListRpc.prototype.setServerlistList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.AddressDat=} opt_value
 * @param {number=} opt_index
 * @return {!proto.AddressDat}
 */
proto.ServerListRpc.prototype.addServerlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.AddressDat, opt_index);
};


proto.ServerListRpc.prototype.clearServerlistList = function() {
  this.setServerlistList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RpcPo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RpcPo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RpcPo.displayName = 'proto.RpcPo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RpcPo.prototype.toObject = function(opt_includeInstance) {
  return proto.RpcPo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RpcPo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.RpcPo.toObject = function(includeInstance, msg) {
  var f, obj = {
    rpc: jspb.Message.getFieldWithDefault(msg, 1, ""),
    hellorpc: (f = msg.getHellorpc()) && proto.HelloRpc.toObject(includeInstance, f),
    serverlistrpc: (f = msg.getServerlistrpc()) && proto.ServerListRpc.toObject(includeInstance, f),
    quitrpc: (f = msg.getQuitrpc()) && proto.QuitRpc.toObject(includeInstance, f),
    heartrpc: (f = msg.getHeartrpc()) && proto.HeartRpc.toObject(includeInstance, f),
    anypo: msg.getAnypo_asB64(),
    clientname: jspb.Message.getFieldWithDefault(msg, 7, ""),
    gateway: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RpcPo}
 */
proto.RpcPo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RpcPo;
  return proto.RpcPo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RpcPo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RpcPo}
 */
proto.RpcPo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRpc(value);
      break;
    case 2:
      var value = new proto.HelloRpc;
      reader.readMessage(value,proto.HelloRpc.deserializeBinaryFromReader);
      msg.setHellorpc(value);
      break;
    case 3:
      var value = new proto.ServerListRpc;
      reader.readMessage(value,proto.ServerListRpc.deserializeBinaryFromReader);
      msg.setServerlistrpc(value);
      break;
    case 4:
      var value = new proto.QuitRpc;
      reader.readMessage(value,proto.QuitRpc.deserializeBinaryFromReader);
      msg.setQuitrpc(value);
      break;
    case 5:
      var value = new proto.HeartRpc;
      reader.readMessage(value,proto.HeartRpc.deserializeBinaryFromReader);
      msg.setHeartrpc(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAnypo(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientname(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setGateway(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RpcPo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RpcPo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RpcPo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.RpcPo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRpc();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHellorpc();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.HelloRpc.serializeBinaryToWriter
    );
  }
  f = message.getServerlistrpc();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ServerListRpc.serializeBinaryToWriter
    );
  }
  f = message.getQuitrpc();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.QuitRpc.serializeBinaryToWriter
    );
  }
  f = message.getHeartrpc();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.HeartRpc.serializeBinaryToWriter
    );
  }
  f = message.getAnypo_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getClientname();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getGateway();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string rpc = 1;
 * @return {string}
 */
proto.RpcPo.prototype.getRpc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.RpcPo.prototype.setRpc = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional HelloRpc helloRpc = 2;
 * @return {?proto.HelloRpc}
 */
proto.RpcPo.prototype.getHellorpc = function() {
  return /** @type{?proto.HelloRpc} */ (
    jspb.Message.getWrapperField(this, proto.HelloRpc, 2));
};


/** @param {?proto.HelloRpc|undefined} value */
proto.RpcPo.prototype.setHellorpc = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.RpcPo.prototype.clearHellorpc = function() {
  this.setHellorpc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RpcPo.prototype.hasHellorpc = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ServerListRpc serverListRpc = 3;
 * @return {?proto.ServerListRpc}
 */
proto.RpcPo.prototype.getServerlistrpc = function() {
  return /** @type{?proto.ServerListRpc} */ (
    jspb.Message.getWrapperField(this, proto.ServerListRpc, 3));
};


/** @param {?proto.ServerListRpc|undefined} value */
proto.RpcPo.prototype.setServerlistrpc = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.RpcPo.prototype.clearServerlistrpc = function() {
  this.setServerlistrpc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RpcPo.prototype.hasServerlistrpc = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional QuitRpc quitRpc = 4;
 * @return {?proto.QuitRpc}
 */
proto.RpcPo.prototype.getQuitrpc = function() {
  return /** @type{?proto.QuitRpc} */ (
    jspb.Message.getWrapperField(this, proto.QuitRpc, 4));
};


/** @param {?proto.QuitRpc|undefined} value */
proto.RpcPo.prototype.setQuitrpc = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.RpcPo.prototype.clearQuitrpc = function() {
  this.setQuitrpc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RpcPo.prototype.hasQuitrpc = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional HeartRpc heartRpc = 5;
 * @return {?proto.HeartRpc}
 */
proto.RpcPo.prototype.getHeartrpc = function() {
  return /** @type{?proto.HeartRpc} */ (
    jspb.Message.getWrapperField(this, proto.HeartRpc, 5));
};


/** @param {?proto.HeartRpc|undefined} value */
proto.RpcPo.prototype.setHeartrpc = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.RpcPo.prototype.clearHeartrpc = function() {
  this.setHeartrpc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RpcPo.prototype.hasHeartrpc = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bytes anyPo = 6;
 * @return {!(string|Uint8Array)}
 */
proto.RpcPo.prototype.getAnypo = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes anyPo = 6;
 * This is a type-conversion wrapper around `getAnypo()`
 * @return {string}
 */
proto.RpcPo.prototype.getAnypo_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAnypo()));
};


/**
 * optional bytes anyPo = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAnypo()`
 * @return {!Uint8Array}
 */
proto.RpcPo.prototype.getAnypo_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAnypo()));
};


/** @param {!(string|Uint8Array)} value */
proto.RpcPo.prototype.setAnypo = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string clientName = 7;
 * @return {string}
 */
proto.RpcPo.prototype.getClientname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.RpcPo.prototype.setClientname = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string gateway = 8;
 * @return {string}
 */
proto.RpcPo.prototype.getGateway = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.RpcPo.prototype.setGateway = function(value) {
  jspb.Message.setField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DisconnectRep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DisconnectRep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DisconnectRep.displayName = 'proto.DisconnectRep';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DisconnectRep.prototype.toObject = function(opt_includeInstance) {
  return proto.DisconnectRep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DisconnectRep} msg The msg instance to transform.
 * @return {!Object}
 */
proto.DisconnectRep.toObject = function(includeInstance, msg) {
  var f, obj = {
    cause: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DisconnectRep}
 */
proto.DisconnectRep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DisconnectRep;
  return proto.DisconnectRep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DisconnectRep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DisconnectRep}
 */
proto.DisconnectRep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.DisconnectCauseEnm} */ (reader.readEnum());
      msg.setCause(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DisconnectRep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DisconnectRep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DisconnectRep} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.DisconnectRep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCause();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional DisconnectCauseEnm cause = 1;
 * @return {!proto.DisconnectCauseEnm}
 */
proto.DisconnectRep.prototype.getCause = function() {
  return /** @type {!proto.DisconnectCauseEnm} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.DisconnectCauseEnm} value */
proto.DisconnectRep.prototype.setCause = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.DisconnectCauseEnm = {
  UNDEFINE_DISCONNECTCASE: 0,
  LOGIN_OTHER_CLIENT: 1
};

goog.object.extend(exports, proto);
